/*
The following program illustrates the process of master write using TWI.
The program enables the interrupt service by setting the value of the Bit Rate (TWBR).
It triggers the interrupt by sending the start condition every 300ms.
The Start condition further changes the TWDR to SLA Write and the TWCR is set to resume the transfer
Further, the TWDR is set to the value we are going to send. In this case count%2 which toggles the data as count is increased every time.


Testing:
    - The ACK from the slave was acheived by a fully connected master slave TWI system and the LED connected to the slave blinks every 300ms corresponding to the data received.
    - When a wrong address is mentioned the NACK is assumed and the assert is called accordingly
*/
#include "wclock.ceu"
native
    _TWI_vect,
;
native/pre do
    ##include <compat/twi.h>
    int SLA=4;
    int count=0;
end
spawn async/isr [_TWI_vect] do
{
  switch(TW_STATUS){
    case TW_START:
        TWDR = (SLA << 1);//SLA+WRITE
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
        break;
    
    case TW_MT_SLA_ACK:
        TWDR = count%2;
        count++;
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
        break;
    case TW_MT_SLA_NACK:
        ceu_arduino_assert(0,3);// in case of slave not connected of receiving NACK from slave
        break;
        
    default:
        TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO) | (1<<TWIE);//default case sends stop condition
  }
}
end
{
    TWBR = ((F_CPU / 100000L) - 16) / 2;// Bit rate formula
}
loop do
    {
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE);//Start Condition
    }
    await 300ms;//send start every 300ms
end